
diff -r SDL-release-3.2.24/include/SDL3/SDL_cpuinfo.h SDL-preview-3.3.2/include/SDL3/SDL_cpuinfo.h
346a347,367
> extern SDL_DECLSPEC int SDLCALL SDL_GetSystemPageSize(void);
> 
diff -r SDL-release-3.2.24/include/SDL3/SDL_dialog.h SDL-preview-3.3.2/include/SDL3/SDL_dialog.h
142,145c142,147
---
Nur in SDL-preview-3.3.2/include/SDL3/: SDL_dlopennote.h.
diff -r SDL-release-3.2.24/include/SDL3/SDL_endian.h SDL-preview-3.3.2/include/SDL3/SDL_endian.h
255c255
<   __asm__("xchgb %b0,%h0": "=Q"(x):"0"(x));
---
>   __asm__("xchgb %b0,%h0": "=abcd"(x):"0"(x));
diff -r SDL-release-3.2.24/include/SDL3/SDL_events.h SDL-preview-3.3.2/include/SDL3/SDL_events.h
33c33
---
129a130
>     SDL_EVENT_DISPLAY_USABLE_BOUNDS_CHANGED, /**< Display has changed usable bounds */
131c132
<     SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED,
---
>     SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_USABLE_BOUNDS_CHANGED,
138c139,140
<     SDL_EVENT_WINDOW_EXPOSED,           /**< Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event */
---
>     SDL_EVENT_WINDOW_EXPOSED,           /**< Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event.
>                                              data1 is 1 for live-resize expose events, 0 otherwise. */
176a179,180
>     SDL_EVENT_SCREEN_KEYBOARD_SHOWN,   /**< The on-screen keyboard has been shown */
>     SDL_EVENT_SCREEN_KEYBOARD_HIDDEN,  /**< The on-screen keyboard has been hidden */
216a221,225
>     /* Pinch events */
>     SDL_EVENT_PINCH_BEGIN      = 0x710,     /**< Pinch gesture started */
>     SDL_EVENT_PINCH_UPDATE,                 /**< Pinch gesture updated */
>     SDL_EVENT_PINCH_END,                    /**< Pinch gesture ended */
> 
220c229
<     SDL_EVENT_CLIPBOARD_UPDATE = 0x900, /**< The clipboard or primary selection changed */
---
>     SDL_EVENT_CLIPBOARD_UPDATE = 0x900, /**< The clipboard changed */
301c310
<     SDL_EventType type; /**< SDL_DISPLAYEVENT_* */
---
>     SDL_EventType type; /**< SDL_EVENT_DISPLAY_* */
706a716,719
784c797,809
---
> typedef struct SDL_PinchFingerEvent
> {
>     SDL_EventType type; /**< ::SDL_EVENT_PINCH_BEGIN or ::SDL_EVENT_PINCH_UPDATE or ::SDL_EVENT_PINCH_END */
>     Uint32 reserved;
>     Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */
>     float scale;        /**< The scale change since the last SDL_EVENT_PINCH_UPDATE. Scale < 1 is "zoom out". Scale > 1 is "zoom in". */
>     SDL_WindowID windowID; /**< The window underneath the finger, if any */
> } SDL_PinchFingerEvent;
> 
970c995
<     Uint32 type;        /**< SDL_EVENT_USER through SDL_EVENT_LAST-1, Uint32 because these are not in the SDL_EventType enumeration */
---
>     Uint32 type;        /**< SDL_EVENT_USER through SDL_EVENT_LAST, Uint32 because these are not in the SDL_EventType enumeration */
1019a1045
>     SDL_PinchFingerEvent pinch;             /**< Pinch event data */
1257a1284,1290
1394c1427,1430
---
1407c1443
---
1568a1605,1636
> 
> extern SDL_DECLSPEC int SDLCALL SDL_GetEventDescription(const SDL_Event *event, char *buf, int buflen);
diff -r SDL-release-3.2.24/include/SDL3/SDL_filesystem.h SDL-preview-3.3.2/include/SDL3/SDL_filesystem.h
91a92,93
136a139,144
146a155,156
218a229,230
285a298,299
348a363,364
362a379,380
370c388
---
385a404,405
425a446,449
438a463,464
447c473
---
450c476
---
491a518,519
diff -r SDL-release-3.2.24/include/SDL3/SDL_gamepad.h SDL-preview-3.3.2/include/SDL3/SDL_gamepad.h
120a121
>     SDL_GAMEPAD_TYPE_GAMECUBE,
130,131c131,133
---
166,169c168,171
<     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,   /**< Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1) */
<     SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,    /**< Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3) */
<     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,   /**< Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2) */
<     SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,    /**< Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4) */
---
>     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,   /**< Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1, DualSense Edge RB button, Right Joy-Con SR button) */
>     SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,    /**< Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3, DualSense Edge LB button, Left Joy-Con SL button) */
>     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,   /**< Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2, DualSense Edge right Fn button, Right Joy-Con SL button) */
>     SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,    /**< Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4, DualSense Edge left Fn button, Left Joy-Con SR button) */
172,173c174,175
<     SDL_GAMEPAD_BUTTON_MISC3,           /**< Additional button */
<     SDL_GAMEPAD_BUTTON_MISC4,           /**< Additional button */
---
>     SDL_GAMEPAD_BUTTON_MISC3,           /**< Additional button (e.g. Nintendo GameCube left trigger click) */
>     SDL_GAMEPAD_BUTTON_MISC4,           /**< Additional button (e.g. Nintendo GameCube right trigger click) */
424a427,428
438a443,444
450a457,458
467a476,477
487a498,499
499a512,513
514a529,530
528a545,546
544a563,564
560a581,582
575a598,599
591a616,617
608a635,636
625a654,655
642a673,674
657a690,691
673a708,709
690a727,728
704a743,744
719a760,761
729a772,773
759a804,805
777a824,825
789a838,839
803a854,855
816a869,870
829a884,885
843a900,901
858a917,918
872a933,934
886a949,950
900a965,966
914a981,982
926a995,996
939a1010,1011
951a1024,1025
971a1046,1047
983a1060,1061
1003a1082,1083
1015a1096,1097
1030a1113,1114
1046a1131,1132
1057a1144,1145
1073a1162,1163
1087a1178,1179
1109a1202,1203
1123a1218,1219
1139a1236,1237
1158a1257,1259
1161,1162c1262,1264
---
1182a1285,1286
1196a1301,1302
1212a1319,1320
1225a1334,1335
1239a1350,1351
1252a1365,1366
1264a1379,1380
1278a1395,1396
1301a1420,1421
1314a1435,1436
1331a1454,1455
1345a1470,1471
1358a1485,1486
1375a1504,1505
1397a1528,1529
1423a1556,1557
1445a1580,1581
1458a1595,1596
1468a1607,1608
1482a1623,1624
1494a1637,1638
diff -r SDL-release-3.2.24/include/SDL3/SDL_gpu.h SDL-preview-3.3.2/include/SDL3/SDL_gpu.h
209,210c209,212
---
214,216c216,222
---
224a231,235
226,227c237,247
---
230,231c250,261
---
238a269,288
303a354,386
1312a1396,1406
1394c1488
<     SDL_GPUTexture *texture;  /**< The texture. */
---
>     SDL_GPUTexture *texture;      /**< The texture. */
1523,1524c1617,1618
<     bool enable_anisotropy;                /**< true to enable anisotropic filtering. */
<     bool enable_compare;                   /**< true to enable comparison against a reference value during lookups. */
---
>     bool enable_anisotropy;                    /**< true to enable anisotropic filtering. */
>     bool enable_compare;                       /**< true to enable comparison against a reference value during lookups. */
1615a1710,1712
1626,1627c1723,1724
<     bool enable_blend;                        /**< Whether blending is enabled for the color target. */
<     bool enable_color_write_mask;             /**< Whether the color write mask is enabled. */
---
>     bool enable_blend;                            /**< Whether blending is enabled for the color target. */
>     bool enable_color_write_mask;                 /**< Whether the color write mask is enabled. */
1638a1736,1737
1744,1745c1843,1844
<     bool enable_depth_bias;        /**< true to bias fragment depth values. */
<     bool enable_depth_clip;        /**< true to enable depth clip, false to enable depth clamp. */
---
>     bool enable_depth_bias;            /**< true to bias fragment depth values. */
>     bool enable_depth_clip;            /**< true to enable depth clip, false to enable depth clamp. */
1762,1763c1861,1862
<     bool enable_mask;             /**< Reserved for future use. Must be set to false. */
<     Uint8 padding1;
---
>     bool enable_mask;                 /**< Reserved for future use. Must be set to false. */
>     bool enable_alpha_to_coverage;    /**< true enables the alpha-to-coverage feature. */
1783,1785c1882,1884
<     bool enable_depth_test;                 /**< true enables the depth test. */
<     bool enable_depth_write;                /**< true enables depth writes. Depth writes are always disabled when enable_depth_test is false. */
<     bool enable_stencil_test;               /**< true enables the stencil test. */
---
>     bool enable_depth_test;                     /**< true enables the depth test. */
>     bool enable_depth_write;                    /**< true enables depth writes. Depth writes are always disabled when enable_depth_test is false. */
>     bool enable_stencil_test;                   /**< true enables the stencil test. */
1820c1919
<     bool has_depth_stencil_target;                               /**< true specifies that the pipeline uses a depth-stencil target. */
---
>     bool has_depth_stencil_target;                                   /**< true specifies that the pipeline uses a depth-stencil target. */
1914a2014
1927,1928c2027,2028
<     bool cycle;                  /**< true cycles the texture if the texture is bound and load_op is not LOAD */
<     bool cycle_resolve_texture;  /**< true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. */
---
>     bool cycle;                      /**< true cycles the texture if the texture is bound and load_op is not LOAD */
>     bool cycle_resolve_texture;      /**< true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. */
1972a2073,2075
1985c2088
<     bool cycle;                        /**< true cycles the texture if the texture is bound and any load ops are not LOAD */
---
>     bool cycle;                            /**< true cycles the texture if the texture is bound and any load ops are not LOAD */
1987,1988c2090,2091
<     Uint8 padding1;
<     Uint8 padding2;
---
>     Uint8 mip_level;                       /**< The mip level to use as the depth stencil target. */
>     Uint8 layer;                           /**< The layer index to use as the depth stencil target. */
2005c2108
<     bool cycle;                 /**< true cycles the destination texture if it is already bound. */
---
>     bool cycle;                     /**< true cycles the destination texture if it is already bound. */
2033a2137,2138
2113a2219,2225
2123a2236
2142a2256,2257
2144a2260,2280
2164a2301,2308
2180,2189c2324,2339
< #define SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN          "SDL.gpu.device.create.debugmode"
< #define SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN     "SDL.gpu.device.create.preferlowpower"
< #define SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING                "SDL.gpu.device.create.name"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN    "SDL.gpu.device.create.shaders.private"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN      "SDL.gpu.device.create.shaders.spirv"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN       "SDL.gpu.device.create.shaders.dxbc"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN       "SDL.gpu.device.create.shaders.dxil"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN        "SDL.gpu.device.create.shaders.msl"
< #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN   "SDL.gpu.device.create.shaders.metallib"
< #define SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING "SDL.gpu.device.create.d3d12.semantic"
---
> #define SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN                            "SDL.gpu.device.create.debugmode"
> #define SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN                       "SDL.gpu.device.create.preferlowpower"
> #define SDL_PROP_GPU_DEVICE_CREATE_VERBOSE_BOOLEAN                              "SDL.gpu.device.create.verbose"
> #define SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING                                  "SDL.gpu.device.create.name"
> #define SDL_PROP_GPU_DEVICE_CREATE_FEATURE_CLIP_DISTANCE_BOOLEAN                "SDL.gpu.device.create.feature.clip_distance"
> #define SDL_PROP_GPU_DEVICE_CREATE_FEATURE_DEPTH_CLAMPING_BOOLEAN               "SDL.gpu.device.create.feature.depth_clamping"
> #define SDL_PROP_GPU_DEVICE_CREATE_FEATURE_INDIRECT_DRAW_FIRST_INSTANCE_BOOLEAN "SDL.gpu.device.create.feature.indirect_draw_first_instance"
> #define SDL_PROP_GPU_DEVICE_CREATE_FEATURE_ANISOTROPY_BOOLEAN                   "SDL.gpu.device.create.feature.anisotropy"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN                      "SDL.gpu.device.create.shaders.private"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN                        "SDL.gpu.device.create.shaders.spirv"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN                         "SDL.gpu.device.create.shaders.dxbc"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN                         "SDL.gpu.device.create.shaders.dxil"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN                          "SDL.gpu.device.create.shaders.msl"
> #define SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN                     "SDL.gpu.device.create.shaders.metallib"
> #define SDL_PROP_GPU_DEVICE_CREATE_D3D12_ALLOW_FEWER_RESOURCE_SLOTS_BOOLEAN     "SDL.gpu.device.create.d3d12.allowtier1resourcebinding"
> #define SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING                   "SDL.gpu.device.create.d3d12.semantic"
2252a2403,2512
> extern SDL_DECLSPEC SDL_PropertiesID SDLCALL SDL_GetGPUDeviceProperties(SDL_GPUDevice *device);
> 
> #define SDL_PROP_GPU_DEVICE_NAME_STRING               "SDL.gpu.device.name"
> #define SDL_PROP_GPU_DEVICE_DRIVER_NAME_STRING        "SDL.gpu.device.driver_name"
> #define SDL_PROP_GPU_DEVICE_DRIVER_VERSION_STRING     "SDL.gpu.device.driver_version"
> #define SDL_PROP_GPU_DEVICE_DRIVER_INFO_STRING        "SDL.gpu.device.driver_info"
> 
> 
2443c2703,2704
---
2484a2746,2747
2824a3088,3090
2894a3161,3168
3516a3791,3792
3778c4054
---
3852c4128,4130
---
4172a4451,4473
> 
> extern SDL_DECLSPEC SDL_PixelFormat SDLCALL SDL_GetPixelFormatFromGPUTextureFormat(SDL_GPUTextureFormat format);
> 
> extern SDL_DECLSPEC SDL_GPUTextureFormat SDLCALL SDL_GetGPUTextureFormatFromPixelFormat(SDL_PixelFormat format);
diff -r SDL-release-3.2.24/include/SDL3/SDL.h SDL-preview-3.3.2/include/SDL3/SDL.h
23c23
---
44a45
> #include <SDL3/SDL_dlopennote.h>
diff -r SDL-release-3.2.24/include/SDL3/SDL_haptic.h SDL-preview-3.3.2/include/SDL3/SDL_haptic.h
73c73
---
151a152,164
> 
> #define SDL_HAPTIC_INFINITY   4294967295U
> 
165a179,183
> typedef Uint16 SDL_HapticEffectType;
> 
386a405,409
> typedef Uint8 SDL_HapticDirectionType;
> 
429,431d451
434c454
---
436c456
---
438c458
---
440c460
< #define SDL_HAPTIC_INFINITY   4294967295U
---
> typedef int SDL_HapticEffectID;
548,549c568,569
<     Uint8 type;         /**< The type of encoding. */
<     Sint32 dir[3];      /**< The encoded direction. */
---
>     SDL_HapticDirectionType type;  /**< The type of encoding. */
>     Sint32 dir[3];                 /**< The encoded direction. */
569c589
<     Uint16 type;            /**< SDL_HAPTIC_CONSTANT */
---
>     SDL_HapticEffectType type;      /**< SDL_HAPTIC_CONSTANT */
655,657c675,677
<     Uint16 type;        /**< SDL_HAPTIC_SINE, SDL_HAPTIC_SQUARE
<                              SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or
<                              SDL_HAPTIC_SAWTOOTHDOWN */
---
>     SDL_HapticEffectType type;      /**< SDL_HAPTIC_SINE, SDL_HAPTIC_SQUARE
>                                          SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or
>                                          SDL_HAPTIC_SAWTOOTHDOWN */
711,712c731,732
<     Uint16 type;            /**< SDL_HAPTIC_SPRING, SDL_HAPTIC_DAMPER,
<                                  SDL_HAPTIC_INERTIA or SDL_HAPTIC_FRICTION */
---
>     SDL_HapticEffectType type;      /**< SDL_HAPTIC_SPRING, SDL_HAPTIC_DAMPER,
>                                          SDL_HAPTIC_INERTIA or SDL_HAPTIC_FRICTION */
750c770
<     Uint16 type;            /**< SDL_HAPTIC_RAMP */
---
>     SDL_HapticEffectType type;      /**< SDL_HAPTIC_RAMP */
789c809
<     Uint16 type;            /**< SDL_HAPTIC_LEFTRIGHT */
---
>     SDL_HapticEffectType type;  /**< SDL_HAPTIC_LEFTRIGHT */
819c839
<     Uint16 type;            /**< SDL_HAPTIC_CUSTOM */
---
>     SDL_HapticEffectType type;      /**< SDL_HAPTIC_CUSTOM */
918c938
<     Uint16 type;                    /**< Effect type. */
---
>     SDL_HapticEffectType type;      /**< Effect type. */
1196c1216
< extern SDL_DECLSPEC int SDLCALL SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
---
> extern SDL_DECLSPEC SDL_HapticEffectID SDLCALL SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
1218c1238
< extern SDL_DECLSPEC bool SDLCALL SDL_UpdateHapticEffect(SDL_Haptic *haptic, int effect, const SDL_HapticEffect *data);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_UpdateHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect, const SDL_HapticEffect *data);
1242c1262
< extern SDL_DECLSPEC bool SDLCALL SDL_RunHapticEffect(SDL_Haptic *haptic, int effect, Uint32 iterations);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_RunHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect, Uint32 iterations);
1257c1277
< extern SDL_DECLSPEC bool SDLCALL SDL_StopHapticEffect(SDL_Haptic *haptic, int effect);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_StopHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect);
1272c1292
< extern SDL_DECLSPEC void SDLCALL SDL_DestroyHapticEffect(SDL_Haptic *haptic, int effect);
---
> extern SDL_DECLSPEC void SDLCALL SDL_DestroyHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect);
1288c1308
< extern SDL_DECLSPEC bool SDLCALL SDL_GetHapticEffectStatus(SDL_Haptic *haptic, int effect);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_GetHapticEffectStatus(SDL_Haptic *haptic, SDL_HapticEffectID effect);
diff -r SDL-release-3.2.24/include/SDL3/SDL_hidapi.h SDL-preview-3.3.2/include/SDL3/SDL_hidapi.h
57a58
> #include <SDL3/SDL_properties.h>
284a286,303
> 
> extern SDL_DECLSPEC SDL_PropertiesID SDLCALL SDL_hid_get_properties(SDL_hid_device *dev);
> 
> #define SDL_PROP_HIDAPI_LIBUSB_DEVICE_HANDLE_POINTER   "SDL.hidapi.libusb.device.handle"
diff -r SDL-release-3.2.24/include/SDL3/SDL_hints.h SDL-preview-3.3.2/include/SDL3/SDL_hints.h
393a394,407
400a415,434
> #define SDL_HINT_AUDIO_DEVICE_RAW_STREAM "SDL_AUDIO_DEVICE_RAW_STREAM"
> 
688a723,737
> #define SDL_HINT_INVALID_PARAM_CHECKS "SDL_INVALID_PARAM_CHECKS"
> 
714,715d762
729c776
---
743a791,812
> #define SDL_HINT_EMSCRIPTEN_FILL_DOCUMENT "SDL_EMSCRIPTEN_FILL_DOCUMENT"
> 
1146,1147c1215,1216
---
1726a1796,1858
> #define SDL_HINT_JOYSTICK_HIDAPI_LG4FF "SDL_JOYSTICK_HIDAPI_LG4FF"
> 
> #define SDL_HINT_JOYSTICK_HIDAPI_8BITDO "SDL_JOYSTICK_HIDAPI_8BITDO"
> 
> #define SDL_HINT_JOYSTICK_HIDAPI_SINPUT "SDL_JOYSTICK_HIDAPI_SINPUT"
> 
> #define SDL_HINT_JOYSTICK_HIDAPI_ZUIKI "SDL_JOYSTICK_HIDAPI_ZUIKI"
> 
> #define SDL_HINT_JOYSTICK_HIDAPI_FLYDIGI "SDL_JOYSTICK_HIDAPI_FLYDIGI"
> 
1777a1910,1926
> #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH2 "SDL_JOYSTICK_HIDAPI_SWITCH2"
> 
1929a2079,2113
> #define SDL_HINT_JOYSTICK_HIDAPI_GIP "SDL_JOYSTICK_HIDAPI_GIP"
> 
> #define SDL_HINT_JOYSTICK_HIDAPI_GIP_RESET_FOR_METADATA "SDL_JOYSTICK_HIDAPI_GIP_RESET_FOR_METADATA"
> 
2231,2233c2415,2417
---
2292a2477,2497
> #define SDL_HINT_KMSDRM_ATOMIC "SDL_KMSDRM_ATOMIC"
> 
2311a2517,2521
2432a2643,2646
2496c2710
---
2862a3077,3094
> #define SDL_HINT_RENDER_DIRECT3D11_WARP "SDL_RENDER_DIRECT3D11_WARP"
> 
3044a3277,3307
> #define SDL_HINT_PS2_GS_WIDTH    "SDL_PS2_GS_WIDTH"
> 
> #define SDL_HINT_PS2_GS_HEIGHT    "SDL_PS2_GS_HEIGHT"
> 
> #define SDL_HINT_PS2_GS_PROGRESSIVE    "SDL_PS2_GS_PROGRESSIVE"
> 
> #define SDL_HINT_PS2_GS_MODE    "SDL_PS2_GS_MODE"
> 
3410a3674,3710
> #define SDL_HINT_VIDEO_METAL_AUTO_RESIZE_DRAWABLE "SDL_VIDEO_METAL_AUTO_RESIZE_DRAWABLE"
> 
> #define SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE "SDL_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE"
> 
4064c4364
---
4066d4365
4072c4371
< #define SDL_HINT_WINDOWS_GAMEINPUT   "SDL_WINDOWS_GAMEINPUT"
---
> #define SDL_HINT_WINDOWS_GAMEINPUT "SDL_WINDOWS_GAMEINPUT"
4117c4416
< #define SDL_HINT_WINDOWS_INTRESOURCE_ICON       "SDL_WINDOWS_INTRESOURCE_ICON"
---
> #define SDL_HINT_WINDOWS_INTRESOURCE_ICON "SDL_WINDOWS_INTRESOURCE_ICON"
4290d4588
< 
4389,4394c4687
---
4401c4694
< extern SDL_DECLSPEC const char * SDLCALL SDL_GetHint(const char *name);
---
> extern SDL_DECLSPEC const char *SDLCALL SDL_GetHint(const char *name);
4477,4478c4770,4771
<                                                      SDL_HintCallback callback,
<                                                      void *userdata);
---
>                                                         SDL_HintCallback callback,
>                                                         void *userdata);
diff -r SDL-release-3.2.24/include/SDL3/SDL_init.h SDL-preview-3.3.2/include/SDL3/SDL_init.h
104c104
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_iostream.h SDL-preview-3.3.2/include/SDL3/SDL_iostream.h
114c114
<      *  at by `ptr`.
---
>      *  at by `ptr`. `size` will always be > 0.
126c126
<      *  to data stream.
---
>      *  to data stream. `size` will always be > 0.
205a206,207
212a215,216
263c267
---
289,290c293
---
302a306,312
323a334
> #define SDL_PROP_IOSTREAM_MEMORY_FREE_FUNC_POINTER "SDL.iostream.memory.free"
336,337c347
---
348a359,365
455c472
---
470c487
---
490c507
---
504c521
---
531c548
---
551c568
---
569a587,590
576c597
---
598a620,623
605c630
---
629c654
---
649c674
---
669c694
---
695c720
---
718c743
---
739c764
---
758c783
---
787c812
---
806c831
---
826c851
---
829c854
---
849c874
---
852c877
---
872c897
---
875c900
---
895c920
---
898c923
---
918c943
---
921c946
---
941c966
---
944c969
---
964c989
---
967c992
---
987c1012
---
990c1015
---
1010c1035
---
1013c1038
---
1033c1058
---
1036c1061
---
1056c1081
---
1059c1084
---
1079c1104
---
1082c1107
---
1104c1129
---
1118c1143
---
1137c1162
---
1156c1181
---
1174c1199
---
1192c1217
---
1211c1236
---
1230c1255
---
1248c1273
---
1266c1291
---
1285c1310
---
1304c1329
---
1322c1347
---
1340c1365
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_joystick.h SDL-preview-3.3.2/include/SDL3/SDL_joystick.h
32,33c32,33
---
50a51,58
109a118,121
172a185,186
179a194,196
188a206,207
203a223,224
219a241,242
235a259,260
250a276,277
266a294,295
283a313,314
300a332,333
317a351,352
334a370,371
351a389,390
364a404,405
375a417,418
467a511,522
471a527,528
474a532,537
485a549,550
497a563,564
520a588,589
521a591,596
540a616,617
541a619,624
559a643,644
560a646,651
578a670,671
579a673,678
604a704,705
605a707,712
626a734,735
627a737,742
650a766,767
667a785,786
680a800,801
695a817,818
710a834,835
726a852,853
741a869,870
755a885,886
769a901,902
784a918,919
797a933,934
807a945,946
826a966,967
839a981,982
850a994,995
865a1011,1012
886a1034,1035
902a1052,1053
918a1070,1071
936a1090,1091
952a1108,1109
964a1122,1123
986a1146,1147
1004a1166,1167
1023a1187,1188
1038a1204,1205
1062a1230,1231
1085a1255,1256
1112a1284,1285
1134a1308,1309
1147a1323,1324
1156a1334,1335
1170a1350,1351
1190a1372,1373
diff -r SDL-release-3.2.24/include/SDL3/SDL_keyboard.h SDL-preview-3.3.2/include/SDL3/SDL_keyboard.h
177,178c177
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_keycode.h SDL-preview-3.3.2/include/SDL3/SDL_keycode.h
53a54,55
diff -r SDL-release-3.2.24/include/SDL3/SDL_log.h SDL-preview-3.3.2/include/SDL3/SDL_log.h
208a209,211
266d268
diff -r SDL-release-3.2.24/include/SDL3/SDL_main.h SDL-preview-3.3.2/include/SDL3/SDL_main.h
50c50
---
71c71
---
88c88
---
350,353c350,353
---
452,453c452,453
---
515c515
---
617a618,620
620,622c623
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_mouse.h SDL-preview-3.3.2/include/SDL3/SDL_mouse.h
133a134,144
> typedef struct SDL_CursorFrameInfo
> {
>     SDL_Surface *surface; /**< The surface data for this frame */
>     Uint32 duration;      /**< The frame duration in milliseconds (a duration of 0 is infinite) */
> } SDL_CursorFrameInfo;
> 
162a174,211
> typedef void (SDLCALL *SDL_MouseMotionTransformCallback)(
>     void *userdata, 
>     Uint64 timestamp, 
>     SDL_Window *window, 
>     SDL_MouseID mouseID, 
>     float *x, float *y
> );
383a433,450
> extern SDL_DECLSPEC bool SDLCALL SDL_SetRelativeMouseTransform(SDL_MouseMotionTransformCallback callback, void *userdata);
> 
511a579
525,533c593,602
---
544a614,615
554a626,676
> extern SDL_DECLSPEC SDL_Cursor *SDLCALL SDL_CreateAnimatedCursor(SDL_CursorFrameInfo *frames,
>                                                                  int frame_count,
>                                                                  int hot_x,
>                                                                  int hot_y);
> 
631a754
diff -r SDL-release-3.2.24/include/SDL3/SDL_mutex.h SDL-preview-3.3.2/include/SDL3/SDL_mutex.h
363c363
< extern SDL_DECLSPEC bool SDLCALL SDL_TryLockMutex(SDL_Mutex *mutex) SDL_TRY_ACQUIRE(0, mutex);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_TryLockMutex(SDL_Mutex *mutex) SDL_TRY_ACQUIRE(true, mutex);
562c562
< extern SDL_DECLSPEC bool SDLCALL SDL_TryLockRWLockForReading(SDL_RWLock *rwlock) SDL_TRY_ACQUIRE_SHARED(0, rwlock);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_TryLockRWLockForReading(SDL_RWLock *rwlock) SDL_TRY_ACQUIRE_SHARED(true, rwlock);
592c592
< extern SDL_DECLSPEC bool SDLCALL SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock) SDL_TRY_ACQUIRE(0, rwlock);
---
> extern SDL_DECLSPEC bool SDLCALL SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock) SDL_TRY_ACQUIRE(true, rwlock);
945c945
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_pen.h SDL-preview-3.3.2/include/SDL3/SDL_pen.h
31,33c31,42
---
45a55
> #include <SDL3/SDL_begin_code.h>
78d87
< 
120a130,168
> typedef enum SDL_PenDeviceType
> {
>     SDL_PEN_DEVICE_TYPE_INVALID = -1, /**< Not a valid pen device. */
>     SDL_PEN_DEVICE_TYPE_UNKNOWN,      /**< Don't know specifics of this pen. */
>     SDL_PEN_DEVICE_TYPE_DIRECT,       /**< Pen touches display. */
>     SDL_PEN_DEVICE_TYPE_INDIRECT      /**< Pen touches something that isn't the display. */
> } SDL_PenDeviceType;
> 
> extern SDL_DECLSPEC SDL_PenDeviceType SDLCALL SDL_GetPenDeviceType(SDL_PenID instance_id);
> 
124a173
> #include <SDL3/SDL_close_code.h>
diff -r SDL-release-3.2.24/include/SDL3/SDL_pixels.h SDL-preview-3.3.2/include/SDL3/SDL_pixels.h
1099c1099
<     SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG  /**< The default colorspace for YUV surfaces if no colorspace is specified */
---
>     SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_BT601_LIMITED  /**< The default colorspace for YUV surfaces if no colorspace is specified */
1382c1382
---
1400c1400
< extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
---
> extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
1413c1413
---
1432c1432
< extern SDL_DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
---
> extern SDL_DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
diff -r SDL-release-3.2.24/include/SDL3/SDL_platform_defines.h SDL-preview-3.3.2/include/SDL3/SDL_platform_defines.h
320c320
< #if defined(_WIN32) || defined(SDL_PLATFORM_CYGWIN)
---
> #if (defined(_WIN32) || defined(SDL_PLATFORM_CYGWIN)) && !defined(__NGAGE__)
473a474,494
> #endif
> 
> #ifdef __NGAGE__
> 
> #define SDL_PLATFORM_NGAGE 1
> #endif
> 
> #ifdef __GNU__
> 
> #define SDL_PLATFORM_HURD 1
diff -r SDL-release-3.2.24/include/SDL3/SDL_power.h SDL-preview-3.3.2/include/SDL3/SDL_power.h
91,92c91,92
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_process.h SDL-preview-3.3.2/include/SDL3/SDL_process.h
168a169,171
194a198,203
221a231
> #define SDL_PROP_PROCESS_CREATE_WORKING_DIRECTORY_STRING    "SDL.process.create.working_directory"
229a240
> #define SDL_PROP_PROCESS_CREATE_CMDLINE_STRING              "SDL.process.create.cmdline"
diff -r SDL-release-3.2.24/include/SDL3/SDL_properties.h SDL-preview-3.3.2/include/SDL3/SDL_properties.h
62c62
---
83a84,108
> #define SDL_PROP_NAME_STRING "SDL.name"
> 
122c147,149
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_rect.h SDL-preview-3.3.2/include/SDL3/SDL_rect.h
91,92c91,95
---
327c330
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_render.h SDL-preview-3.3.2/include/SDL3/SDL_render.h
42,44c42,44
---
61a62
> #include <SDL3/SDL_gpu.h>
76a78,84
> #define SDL_GPU_RENDERER        "gpu"
> 
100a109,127
> typedef enum SDL_TextureAddressMode
> {
>     SDL_TEXTURE_ADDRESS_INVALID = -1,
>     SDL_TEXTURE_ADDRESS_AUTO,   /**< Wrapping is enabled if texture coordinates are outside [0, 1], this is the default */
>     SDL_TEXTURE_ADDRESS_CLAMP,  /**< Texture coordinates are clamped to the [0, 1] range */
>     SDL_TEXTURE_ADDRESS_WRAP    /**< The texture is repeated (tiled) */
> } SDL_TextureAddressMode;
> 
109c136
<     SDL_LOGICAL_PRESENTATION_LETTERBOX, /**< The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars */
---
>     SDL_LOGICAL_PRESENTATION_LETTERBOX, /**< The rendered content is fit to the largest dimension and the other dimension is letterboxed with the clear color */
269a297,307
305a344,347
> #define SDL_PROP_RENDERER_CREATE_GPU_DEVICE_POINTER                         "SDL.renderer.create.gpu.device"
> #define SDL_PROP_RENDERER_CREATE_GPU_SHADERS_SPIRV_BOOLEAN                  "SDL.renderer.create.gpu.shaders_spirv"
> #define SDL_PROP_RENDERER_CREATE_GPU_SHADERS_DXIL_BOOLEAN                   "SDL.renderer.create.gpu.shaders_dxil"
> #define SDL_PROP_RENDERER_CREATE_GPU_SHADERS_MSL_BOOLEAN                    "SDL.renderer.create.gpu.shaders_msl"
313a356,402
> extern SDL_DECLSPEC SDL_Renderer * SDLCALL SDL_CreateGPURenderer(SDL_GPUDevice *device, SDL_Window *window);
> 
> extern SDL_DECLSPEC SDL_GPUDevice * SDLCALL SDL_GetGPURendererDevice(SDL_Renderer *renderer);
> 
326c415
---
391a481,482
467a559
> #define SDL_PROP_RENDERER_TEXTURE_WRAPPING_BOOLEAN                  "SDL.renderer.texture_wrapping"
603a696,698
679a775,788
698,720c807,834
< #define SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER           "SDL.texture.create.colorspace"
< #define SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER               "SDL.texture.create.format"
< #define SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER               "SDL.texture.create.access"
< #define SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER                "SDL.texture.create.width"
< #define SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER               "SDL.texture.create.height"
< #define SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT       "SDL.texture.create.SDR_white_point"
< #define SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT          "SDL.texture.create.HDR_headroom"
< #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER       "SDL.texture.create.d3d11.texture"
< #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER     "SDL.texture.create.d3d11.texture_u"
< #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER     "SDL.texture.create.d3d11.texture_v"
< #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER       "SDL.texture.create.d3d12.texture"
< #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER     "SDL.texture.create.d3d12.texture_u"
< #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER     "SDL.texture.create.d3d12.texture_v"
< #define SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER   "SDL.texture.create.metal.pixelbuffer"
< #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER       "SDL.texture.create.opengl.texture"
< #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER    "SDL.texture.create.opengl.texture_uv"
< #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER     "SDL.texture.create.opengl.texture_u"
< #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER     "SDL.texture.create.opengl.texture_v"
< #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER    "SDL.texture.create.opengles2.texture"
< #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER "SDL.texture.create.opengles2.texture_uv"
< #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER  "SDL.texture.create.opengles2.texture_u"
< #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER  "SDL.texture.create.opengles2.texture_v"
< #define SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER       "SDL.texture.create.vulkan.texture"
---
> #define SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER               "SDL.texture.create.colorspace"
> #define SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER                   "SDL.texture.create.format"
> #define SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER                   "SDL.texture.create.access"
> #define SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER                    "SDL.texture.create.width"
> #define SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER                   "SDL.texture.create.height"
> #define SDL_PROP_TEXTURE_CREATE_PALETTE_POINTER                 "SDL.texture.create.palette"
> #define SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT           "SDL.texture.create.SDR_white_point"
> #define SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT              "SDL.texture.create.HDR_headroom"
> #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER           "SDL.texture.create.d3d11.texture"
> #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER         "SDL.texture.create.d3d11.texture_u"
> #define SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER         "SDL.texture.create.d3d11.texture_v"
> #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER           "SDL.texture.create.d3d12.texture"
> #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER         "SDL.texture.create.d3d12.texture_u"
> #define SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER         "SDL.texture.create.d3d12.texture_v"
> #define SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER       "SDL.texture.create.metal.pixelbuffer"
> #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER           "SDL.texture.create.opengl.texture"
> #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER        "SDL.texture.create.opengl.texture_uv"
> #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER         "SDL.texture.create.opengl.texture_u"
> #define SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER         "SDL.texture.create.opengl.texture_v"
> #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER        "SDL.texture.create.opengles2.texture"
> #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER     "SDL.texture.create.opengles2.texture_uv"
> #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER      "SDL.texture.create.opengles2.texture_u"
> #define SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER      "SDL.texture.create.opengles2.texture_v"
> #define SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER           "SDL.texture.create.vulkan.texture"
> #define SDL_PROP_TEXTURE_CREATE_GPU_TEXTURE_POINTER             "SDL.texture.create.gpu.texture"
> #define SDL_PROP_TEXTURE_CREATE_GPU_TEXTURE_UV_POINTER          "SDL.texture.create.gpu.texture_uv"
> #define SDL_PROP_TEXTURE_CREATE_GPU_TEXTURE_U_POINTER           "SDL.texture.create.gpu.texture_u"
> #define SDL_PROP_TEXTURE_CREATE_GPU_TEXTURE_V_POINTER           "SDL.texture.create.gpu.texture_v"
799a914,924
835a961,964
> #define SDL_PROP_TEXTURE_GPU_TEXTURE_POINTER                "SDL.texture.gpu.texture"
> #define SDL_PROP_TEXTURE_GPU_TEXTURE_UV_POINTER             "SDL.texture.gpu.texture_uv"
> #define SDL_PROP_TEXTURE_GPU_TEXTURE_U_POINTER              "SDL.texture.gpu.texture_u"
> #define SDL_PROP_TEXTURE_GPU_TEXTURE_V_POINTER              "SDL.texture.gpu.texture_v"
867a997,1033
> extern SDL_DECLSPEC bool SDLCALL SDL_SetTexturePalette(SDL_Texture *texture, SDL_Palette *palette);
> 
> extern SDL_DECLSPEC SDL_Palette * SDLCALL SDL_GetTexturePalette(SDL_Texture *texture);
> 
1389,1396d1554
1421c1579
---
1427,1429c1585,1588
---
2233a2393
2237a2398,2435
> extern SDL_DECLSPEC bool SDLCALL SDL_RenderTexture9GridTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect, float tileScale);
> 
2257a2456
2289a2489
2299a2500,2537
> extern SDL_DECLSPEC bool SDLCALL SDL_SetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode u_mode, SDL_TextureAddressMode v_mode);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_GetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode *u_mode, SDL_TextureAddressMode *v_mode);
> 
2350,2351c2588
---
2580,2581c2817,2818
---
2637a2875,3016
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode scale_mode);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_GetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode *scale_mode);
> 
> typedef struct SDL_GPURenderStateCreateInfo
> {
>     SDL_GPUShader *fragment_shader; /**< The fragment shader to use when this render state is active */
> 
>     Sint32 num_sampler_bindings;    /**< The number of additional fragment samplers to bind when this render state is active */
>     const SDL_GPUTextureSamplerBinding *sampler_bindings;   /**< Additional fragment samplers to bind when this render state is active */
> 
>     Sint32 num_storage_textures;    /**< The number of storage textures to bind when this render state is active */
>     SDL_GPUTexture *const *storage_textures;    /**< Storage textures to bind when this render state is active */
> 
>     Sint32 num_storage_buffers;     /**< The number of storage buffers to bind when this render state is active */
>     SDL_GPUBuffer *const *storage_buffers;      /**< Storage buffers to bind when this render state is active */
> 
>     SDL_PropertiesID props;         /**< A properties ID for extensions. Should be 0 if no extensions are needed. */
> } SDL_GPURenderStateCreateInfo;
> 
> typedef struct SDL_GPURenderState SDL_GPURenderState;
> 
> extern SDL_DECLSPEC SDL_GPURenderState * SDLCALL SDL_CreateGPURenderState(SDL_Renderer *renderer, SDL_GPURenderStateCreateInfo *createinfo);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SetGPURenderStateFragmentUniforms(SDL_GPURenderState *state, Uint32 slot_index, const void *data, Uint32 length);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SetGPURenderState(SDL_Renderer *renderer, SDL_GPURenderState *state);
> 
> extern SDL_DECLSPEC void SDLCALL SDL_DestroyGPURenderState(SDL_GPURenderState *state);
diff -r SDL-release-3.2.24/include/SDL3/SDL_stdinc.h SDL-preview-3.3.2/include/SDL3/SDL_stdinc.h
52d51
< #include <stdint.h>
55a55,82
> #if defined(_MSC_VER) && (_MSC_VER < 1600)
> typedef signed __int8 int8_t;
> typedef unsigned __int8 uint8_t;
> typedef signed __int16 int16_t;
> typedef unsigned __int16 uint16_t;
> typedef signed __int32 int32_t;
> typedef unsigned __int32 uint32_t;
> typedef signed __int64 int64_t;
> typedef unsigned __int64 uint64_t;
> #ifndef _INTPTR_T_DEFINED
> #ifdef _WIN64
> typedef __int64 intptr_t;
> #else
> typedef int intptr_t;
> #endif
> #endif
> #ifndef _UINTPTR_T_DEFINED
> #ifdef _WIN64
> typedef unsigned __int64 uintptr_t;
> #else
> typedef unsigned int uintptr_t;
> #endif
> #endif
> #else
> #include <stdint.h>
> #endif
> 
495c522
---
2122c2149
---
4725c4752
---
4753c4780
---
4995c5022
---
5023c5050
---
5974a6002,6005
> #endif
> 
> #if !defined(HAVE_STRTOK_R) && !defined(strtok_r)
> char *strtok_r(char *str, const char *delim, char **saveptr);
diff -r SDL-release-3.2.24/include/SDL3/SDL_storage.h SDL-preview-3.3.2/include/SDL3/SDL_storage.h
336a337,340
diff -r SDL-release-3.2.24/include/SDL3/SDL_surface.h SDL-preview-3.3.2/include/SDL3/SDL_surface.h
32,37c32,41
---
86,87c90,92
<     SDL_SCALEMODE_NEAREST, /**< nearest pixel sampling */
<     SDL_SCALEMODE_LINEAR   /**< linear filtering */
---
>     SDL_SCALEMODE_NEAREST,  /**< nearest pixel sampling */
>     SDL_SCALEMODE_LINEAR,   /**< linear filtering */
>     SDL_SCALEMODE_PIXELART  /**< nearest pixel sampling with improved scaling for pixel art, available since SDL 3.4.0 */
97,99c102,105
<     SDL_FLIP_NONE,          /**< Do not flip */
<     SDL_FLIP_HORIZONTAL,    /**< flip horizontally */
<     SDL_FLIP_VERTICAL       /**< flip vertically */
---
>     SDL_FLIP_NONE,                                                                  /**< Do not flip */
>     SDL_FLIP_HORIZONTAL,                                                            /**< flip horizontally */
>     SDL_FLIP_VERTICAL,                                                              /**< flip vertically */
>     SDL_FLIP_HORIZONTAL_AND_VERTICAL = (SDL_FLIP_HORIZONTAL | SDL_FLIP_VERTICAL)    /**< flip horizontally and vertically (not a diagonal flip) */
267c273,274
---
286c293,294
---
316c324,325
---
326a336,338
334c346,347
---
375c388,389
---
418c432,433
---
436c451,452
---
462,464c478,481
---
546c563,564
---
556c574
---
569c587,588
---
578a598,677
> extern SDL_DECLSPEC SDL_Surface * SDLCALL SDL_LoadPNG_IO(SDL_IOStream *src, bool closeio);
> 
> extern SDL_DECLSPEC SDL_Surface * SDLCALL SDL_LoadPNG(const char *file);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SavePNG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SavePNG(SDL_Surface *surface, const char *file);
> 
589c688,689
---
631c731,732
---
696c797,798
---
716c818,819
---
738c841,842
---
776c880,881
---
815c920,921
---
836c942,943
---
852c959,960
---
858a967,987
> extern SDL_DECLSPEC SDL_Surface * SDLCALL SDL_RotateSurface(SDL_Surface *surface, float angle);
> 
870c999,1000
---
891c1021,1022
---
918c1049,1050
---
946c1078,1079
---
1049c1182,1183
---
1071c1205,1206
---
1096c1231,1232
---
1123c1259,1260
---
1414c1551,1552
---
1447c1585,1586
---
1478c1617,1618
---
1504c1644,1645
---
1529c1670,1671
---
1551c1693,1694
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_system.h SDL-preview-3.3.2/include/SDL3/SDL_system.h
250c250
---
257c257
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_test_common.h SDL-preview-3.3.2/include/SDL3/SDL_test_common.h
155a156,159
>     /* Misc. */
>     int quit_after_ms_interval;
>     SDL_TimerID quit_after_ms_timer;
> 
diff -r SDL-release-3.2.24/include/SDL3/SDL_thread.h SDL-preview-3.3.2/include/SDL3/SDL_thread.h
40c40,41
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_timer.h SDL-preview-3.3.2/include/SDL3/SDL_timer.h
37c37
---
188c188,189
---
190,191c191,193
---
195a198,199
diff -r SDL-release-3.2.24/include/SDL3/SDL_version.h SDL-preview-3.3.2/include/SDL3/SDL_version.h
56c56
< #define SDL_MINOR_VERSION   2
---
> #define SDL_MINOR_VERSION   3
65c65
< #define SDL_MICRO_VERSION   24
---
> #define SDL_MICRO_VERSION   2
151c151,152
---
153c154
---
157c158
---
diff -r SDL-release-3.2.24/include/SDL3/SDL_video.h SDL-preview-3.3.2/include/SDL3/SDL_video.h
182a183,188
222a229,230
234a243,244
243a254,255
252a265,266
262a277,278
274a291,292
283a302,303
292a313,314
310a333,347
> typedef enum SDL_ProgressState
> {
>     SDL_PROGRESS_STATE_INVALID = -1,    /**< An invalid progress state indicating an error; check SDL_GetError() */
>     SDL_PROGRESS_STATE_NONE,            /**< No progress bar is shown */
>     SDL_PROGRESS_STATE_INDETERMINATE,   /**< The progress bar is shown in a indeterminate state */
>     SDL_PROGRESS_STATE_NORMAL,          /**< The progress bar is shown in a normal state */
>     SDL_PROGRESS_STATE_PAUSED,          /**< The progress bar is shown in a paused state */
>     SDL_PROGRESS_STATE_ERROR            /**< The progress bar is shown in a state indicating the application had an error */
> } SDL_ProgressState;
> 
315a353,355
533c573,574
---
619a661,665
631a678
> #define SDL_PROP_DISPLAY_WAYLAND_WL_OUTPUT_POINTER       "SDL.display.wayland.wl_output"
1052,1053d1098
1081c1126,1127
---
1170,1177c1216,1224
---
1219,1221c1266,1269
---
1283c1331
---
1291c1339
---
1307,1308c1355,1379
---
1368a1440,1442
> #define SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_CANVAS_ID_STRING         "SDL.window.create.emscripten.canvas_id"
> #define SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_FILL_DOCUMENT_BOOLEAN    "SDL.window.create.emscripten.fill_document"
> #define SDL_PROP_WINDOW_CREATE_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING  "SDL.window.create.emscripten.keyboard_element"
1480,1481c1554,1555
---
1532a1607,1616
1559c1643
< #define SDL_PROP_WINDOW_OPENVR_OVERLAY_ID                           "SDL.window.openvr.overlay_id"
---
> #define SDL_PROP_WINDOW_OPENVR_OVERLAY_ID_NUMBER                    "SDL.window.openvr.overlay_id"
1577a1662,1664
> #define SDL_PROP_WINDOW_EMSCRIPTEN_CANVAS_ID_STRING                 "SDL.window.emscripten.canvas_id"
> #define SDL_PROP_WINDOW_EMSCRIPTEN_FILL_DOCUMENT_BOOLEAN            "SDL.window.emscripten.fill_document"
> #define SDL_PROP_WINDOW_EMSCRIPTEN_KEYBOARD_ELEMENT_STRING          "SDL.window.emscripten.keyboard_element"
1635,1643c1722,1731
---
1652a1741,1742
1846c1936
---
2473d2562
2818a2908,2963
> extern SDL_DECLSPEC bool SDLCALL SDL_SetWindowProgressState(SDL_Window *window, SDL_ProgressState state);
> 
> extern SDL_DECLSPEC SDL_ProgressState SDLCALL SDL_GetWindowProgressState(SDL_Window *window);
> 
> extern SDL_DECLSPEC bool SDLCALL SDL_SetWindowProgressValue(SDL_Window *window, float value);
> 
> extern SDL_DECLSPEC float SDLCALL SDL_GetWindowProgressValue(SDL_Window *window);
> 
3053,3054c3198
---
3062a3207
3087a3233,3238
