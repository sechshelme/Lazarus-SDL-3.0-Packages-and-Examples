{ was #define dname(params) para_def_expr }
{ argument types are unknown }
{ return type might be wrong }   
function FTC_IMAGE_TYPE_COMPARE(d1,d2 : longint) : longint;
begin
  FTC_IMAGE_TYPE_COMPARE:=(((d1^.face_id)=((d2^.face_id) and (@(d1^.width))))=((d2^.width) and (@(d1^.flags))))=(d2^.flags);
end;

{ was #define dname def_expr }
function FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY:=FT_MAKE_TAG('i','g','p','f');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY:=FT_MAKE_TAG('i','g','p','s');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_INCREMENTAL : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_INCREMENTAL:=FT_MAKE_TAG('i','n','c','r');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_IGNORE_SBIX : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_IGNORE_SBIX:=FT_MAKE_TAG('i','s','b','x');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_LCD_FILTER_WEIGHTS : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_LCD_FILTER_WEIGHTS:=FT_MAKE_TAG('l','c','d','f');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_RANDOM_SEED : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_RANDOM_SEED:=FT_MAKE_TAG('s','e','e','d');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_STEM_DARKENING : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_STEM_DARKENING:=FT_MAKE_TAG('d','a','r','k');
  end;

{ was #define dname def_expr }
function FT_PARAM_TAG_UNPATENTED_HINTING : longint; { return type might be wrong }
  begin
    FT_PARAM_TAG_UNPATENTED_HINTING:=FT_MAKE_TAG('u','n','p','a');
  end;

    { was #define dname def_expr }
    function FT_VALIDATE_feat : longint; { return type might be wrong }
      begin
        FT_VALIDATE_feat:=FT_VALIDATE_GX_BITFIELD(feat);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_mort : longint; { return type might be wrong }
      begin
        FT_VALIDATE_mort:=FT_VALIDATE_GX_BITFIELD(mort);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_morx : longint; { return type might be wrong }
      begin
        FT_VALIDATE_morx:=FT_VALIDATE_GX_BITFIELD(morx);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_bsln : longint; { return type might be wrong }
      begin
        FT_VALIDATE_bsln:=FT_VALIDATE_GX_BITFIELD(bsln);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_just : longint; { return type might be wrong }
      begin
        FT_VALIDATE_just:=FT_VALIDATE_GX_BITFIELD(just);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_kern : longint; { return type might be wrong }
      begin
        FT_VALIDATE_kern:=FT_VALIDATE_GX_BITFIELD(kern);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_opbd : longint; { return type might be wrong }
      begin
        FT_VALIDATE_opbd:=FT_VALIDATE_GX_BITFIELD(opbd);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_trak : longint; { return type might be wrong }
      begin
        FT_VALIDATE_trak:=FT_VALIDATE_GX_BITFIELD(trak);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_prop : longint; { return type might be wrong }
      begin
        FT_VALIDATE_prop:=FT_VALIDATE_GX_BITFIELD(prop);
      end;

    { was #define dname def_expr }
    function FT_VALIDATE_lcar : longint; { return type might be wrong }
      begin
        FT_VALIDATE_lcar:=FT_VALIDATE_GX_BITFIELD(lcar);
      end;

    { was #define dname def_expr }
    function TTAG_avar : longint; { return type might be wrong }
      begin
        TTAG_avar:=FT_MAKE_TAG('a','v','a','r');
      end;

    { was #define dname def_expr }
    function TTAG_BASE : longint; { return type might be wrong }
      begin
        TTAG_BASE:=FT_MAKE_TAG('B','A','S','E');
      end;

    { was #define dname def_expr }
    function TTAG_bdat : longint; { return type might be wrong }
      begin
        TTAG_bdat:=FT_MAKE_TAG('b','d','a','t');
      end;

    { was #define dname def_expr }
    function TTAG_BDF : longint; { return type might be wrong }
      begin
        TTAG_BDF:=FT_MAKE_TAG('B','D','F',' ');
      end;

    { was #define dname def_expr }
    function TTAG_bhed : longint; { return type might be wrong }
      begin
        TTAG_bhed:=FT_MAKE_TAG('b','h','e','d');
      end;

    { was #define dname def_expr }
    function TTAG_bloc : longint; { return type might be wrong }
      begin
        TTAG_bloc:=FT_MAKE_TAG('b','l','o','c');
      end;

    { was #define dname def_expr }
    function TTAG_bsln : longint; { return type might be wrong }
      begin
        TTAG_bsln:=FT_MAKE_TAG('b','s','l','n');
      end;

    { was #define dname def_expr }
    function TTAG_CBDT : longint; { return type might be wrong }
      begin
        TTAG_CBDT:=FT_MAKE_TAG('C','B','D','T');
      end;

    { was #define dname def_expr }
    function TTAG_CBLC : longint; { return type might be wrong }
      begin
        TTAG_CBLC:=FT_MAKE_TAG('C','B','L','C');
      end;

    { was #define dname def_expr }
    function TTAG_CFF : longint; { return type might be wrong }
      begin
        TTAG_CFF:=FT_MAKE_TAG('C','F','F',' ');
      end;

    { was #define dname def_expr }
    function TTAG_CFF2 : longint; { return type might be wrong }
      begin
        TTAG_CFF2:=FT_MAKE_TAG('C','F','F','2');
      end;

    { was #define dname def_expr }
    function TTAG_CID : longint; { return type might be wrong }
      begin
        TTAG_CID:=FT_MAKE_TAG('C','I','D',' ');
      end;

    { was #define dname def_expr }
    function TTAG_cmap : longint; { return type might be wrong }
      begin
        TTAG_cmap:=FT_MAKE_TAG('c','m','a','p');
      end;

    { was #define dname def_expr }
    function TTAG_COLR : longint; { return type might be wrong }
      begin
        TTAG_COLR:=FT_MAKE_TAG('C','O','L','R');
      end;

    { was #define dname def_expr }
    function TTAG_CPAL : longint; { return type might be wrong }
      begin
        TTAG_CPAL:=FT_MAKE_TAG('C','P','A','L');
      end;

    { was #define dname def_expr }
    function TTAG_cvar : longint; { return type might be wrong }
      begin
        TTAG_cvar:=FT_MAKE_TAG('c','v','a','r');
      end;

    { was #define dname def_expr }
    function TTAG_cvt : longint; { return type might be wrong }
      begin
        TTAG_cvt:=FT_MAKE_TAG('c','v','t',' ');
      end;

    { was #define dname def_expr }
    function TTAG_DSIG : longint; { return type might be wrong }
      begin
        TTAG_DSIG:=FT_MAKE_TAG('D','S','I','G');
      end;

    { was #define dname def_expr }
    function TTAG_EBDT : longint; { return type might be wrong }
      begin
        TTAG_EBDT:=FT_MAKE_TAG('E','B','D','T');
      end;

    { was #define dname def_expr }
    function TTAG_EBLC : longint; { return type might be wrong }
      begin
        TTAG_EBLC:=FT_MAKE_TAG('E','B','L','C');
      end;

    { was #define dname def_expr }
    function TTAG_EBSC : longint; { return type might be wrong }
      begin
        TTAG_EBSC:=FT_MAKE_TAG('E','B','S','C');
      end;

    { was #define dname def_expr }
    function TTAG_feat : longint; { return type might be wrong }
      begin
        TTAG_feat:=FT_MAKE_TAG('f','e','a','t');
      end;

    { was #define dname def_expr }
    function TTAG_FOND : longint; { return type might be wrong }
      begin
        TTAG_FOND:=FT_MAKE_TAG('F','O','N','D');
      end;

    { was #define dname def_expr }
    function TTAG_fpgm : longint; { return type might be wrong }
      begin
        TTAG_fpgm:=FT_MAKE_TAG('f','p','g','m');
      end;

    { was #define dname def_expr }
    function TTAG_fvar : longint; { return type might be wrong }
      begin
        TTAG_fvar:=FT_MAKE_TAG('f','v','a','r');
      end;

    { was #define dname def_expr }
    function TTAG_gasp : longint; { return type might be wrong }
      begin
        TTAG_gasp:=FT_MAKE_TAG('g','a','s','p');
      end;

    { was #define dname def_expr }
    function TTAG_GDEF : longint; { return type might be wrong }
      begin
        TTAG_GDEF:=FT_MAKE_TAG('G','D','E','F');
      end;

    { was #define dname def_expr }
    function TTAG_glyf : longint; { return type might be wrong }
      begin
        TTAG_glyf:=FT_MAKE_TAG('g','l','y','f');
      end;

    { was #define dname def_expr }
    function TTAG_GPOS : longint; { return type might be wrong }
      begin
        TTAG_GPOS:=FT_MAKE_TAG('G','P','O','S');
      end;

    { was #define dname def_expr }
    function TTAG_GSUB : longint; { return type might be wrong }
      begin
        TTAG_GSUB:=FT_MAKE_TAG('G','S','U','B');
      end;

    { was #define dname def_expr }
    function TTAG_gvar : longint; { return type might be wrong }
      begin
        TTAG_gvar:=FT_MAKE_TAG('g','v','a','r');
      end;

    { was #define dname def_expr }
    function TTAG_HVAR : longint; { return type might be wrong }
      begin
        TTAG_HVAR:=FT_MAKE_TAG('H','V','A','R');
      end;

    { was #define dname def_expr }
    function TTAG_hdmx : longint; { return type might be wrong }
      begin
        TTAG_hdmx:=FT_MAKE_TAG('h','d','m','x');
      end;

    { was #define dname def_expr }
    function TTAG_head : longint; { return type might be wrong }
      begin
        TTAG_head:=FT_MAKE_TAG('h','e','a','d');
      end;

    { was #define dname def_expr }
    function TTAG_hhea : longint; { return type might be wrong }
      begin
        TTAG_hhea:=FT_MAKE_TAG('h','h','e','a');
      end;

    { was #define dname def_expr }
    function TTAG_hmtx : longint; { return type might be wrong }
      begin
        TTAG_hmtx:=FT_MAKE_TAG('h','m','t','x');
      end;

    { was #define dname def_expr }
    function TTAG_JSTF : longint; { return type might be wrong }
      begin
        TTAG_JSTF:=FT_MAKE_TAG('J','S','T','F');
      end;

    { was #define dname def_expr }
    function TTAG_just : longint; { return type might be wrong }
      begin
        TTAG_just:=FT_MAKE_TAG('j','u','s','t');
      end;

    { was #define dname def_expr }
    function TTAG_kern : longint; { return type might be wrong }
      begin
        TTAG_kern:=FT_MAKE_TAG('k','e','r','n');
      end;

    { was #define dname def_expr }
    function TTAG_lcar : longint; { return type might be wrong }
      begin
        TTAG_lcar:=FT_MAKE_TAG('l','c','a','r');
      end;

    { was #define dname def_expr }
    function TTAG_loca : longint; { return type might be wrong }
      begin
        TTAG_loca:=FT_MAKE_TAG('l','o','c','a');
      end;

    { was #define dname def_expr }
    function TTAG_LTSH : longint; { return type might be wrong }
      begin
        TTAG_LTSH:=FT_MAKE_TAG('L','T','S','H');
      end;

    { was #define dname def_expr }
    function TTAG_LWFN : longint; { return type might be wrong }
      begin
        TTAG_LWFN:=FT_MAKE_TAG('L','W','F','N');
      end;

    { was #define dname def_expr }
    function TTAG_MATH : longint; { return type might be wrong }
      begin
        TTAG_MATH:=FT_MAKE_TAG('M','A','T','H');
      end;

    { was #define dname def_expr }
    function TTAG_maxp : longint; { return type might be wrong }
      begin
        TTAG_maxp:=FT_MAKE_TAG('m','a','x','p');
      end;

    { was #define dname def_expr }
    function TTAG_META : longint; { return type might be wrong }
      begin
        TTAG_META:=FT_MAKE_TAG('M','E','T','A');
      end;

    { was #define dname def_expr }
    function TTAG_MMFX : longint; { return type might be wrong }
      begin
        TTAG_MMFX:=FT_MAKE_TAG('M','M','F','X');
      end;

    { was #define dname def_expr }
    function TTAG_MMSD : longint; { return type might be wrong }
      begin
        TTAG_MMSD:=FT_MAKE_TAG('M','M','S','D');
      end;

    { was #define dname def_expr }
    function TTAG_mort : longint; { return type might be wrong }
      begin
        TTAG_mort:=FT_MAKE_TAG('m','o','r','t');
      end;

    { was #define dname def_expr }
    function TTAG_morx : longint; { return type might be wrong }
      begin
        TTAG_morx:=FT_MAKE_TAG('m','o','r','x');
      end;

    { was #define dname def_expr }
    function TTAG_MVAR : longint; { return type might be wrong }
      begin
        TTAG_MVAR:=FT_MAKE_TAG('M','V','A','R');
      end;

    { was #define dname def_expr }
    function TTAG_name : longint; { return type might be wrong }
      begin
        TTAG_name:=FT_MAKE_TAG('n','a','m','e');
      end;

    { was #define dname def_expr }
    function TTAG_opbd : longint; { return type might be wrong }
      begin
        TTAG_opbd:=FT_MAKE_TAG('o','p','b','d');
      end;

    { was #define dname def_expr }
    function TTAG_OS2 : longint; { return type might be wrong }
      begin
        TTAG_OS2:=FT_MAKE_TAG('O','S','/','2');
      end;

    { was #define dname def_expr }
    function TTAG_OTTO : longint; { return type might be wrong }
      begin
        TTAG_OTTO:=FT_MAKE_TAG('O','T','T','O');
      end;

    { was #define dname def_expr }
    function TTAG_PCLT : longint; { return type might be wrong }
      begin
        TTAG_PCLT:=FT_MAKE_TAG('P','C','L','T');
      end;

    { was #define dname def_expr }
    function TTAG_POST : longint; { return type might be wrong }
      begin
        TTAG_POST:=FT_MAKE_TAG('P','O','S','T');
      end;

    { was #define dname def_expr }
    function TTAG_post : longint; { return type might be wrong }
      begin
        TTAG_post:=FT_MAKE_TAG('p','o','s','t');
      end;

    { was #define dname def_expr }
    function TTAG_prep : longint; { return type might be wrong }
      begin
        TTAG_prep:=FT_MAKE_TAG('p','r','e','p');
      end;

    { was #define dname def_expr }
    function TTAG_prop : longint; { return type might be wrong }
      begin
        TTAG_prop:=FT_MAKE_TAG('p','r','o','p');
      end;

    { was #define dname def_expr }
    function TTAG_sbix : longint; { return type might be wrong }
      begin
        TTAG_sbix:=FT_MAKE_TAG('s','b','i','x');
      end;

    { was #define dname def_expr }
    function TTAG_sfnt : longint; { return type might be wrong }
      begin
        TTAG_sfnt:=FT_MAKE_TAG('s','f','n','t');
      end;

    { was #define dname def_expr }
    function TTAG_SING : longint; { return type might be wrong }
      begin
        TTAG_SING:=FT_MAKE_TAG('S','I','N','G');
      end;

    { was #define dname def_expr }
    function TTAG_SVG : longint; { return type might be wrong }
      begin
        TTAG_SVG:=FT_MAKE_TAG('S','V','G',' ');
      end;

    { was #define dname def_expr }
    function TTAG_trak : longint; { return type might be wrong }
      begin
        TTAG_trak:=FT_MAKE_TAG('t','r','a','k');
      end;

    { was #define dname def_expr }
    function TTAG_true : longint; { return type might be wrong }
      begin
        TTAG_true:=FT_MAKE_TAG('t','r','u','e');
      end;

    { was #define dname def_expr }
    function TTAG_ttc : longint; { return type might be wrong }
      begin
        TTAG_ttc:=FT_MAKE_TAG('t','t','c',' ');
      end;

    { was #define dname def_expr }
    function TTAG_ttcf : longint; { return type might be wrong }
      begin
        TTAG_ttcf:=FT_MAKE_TAG('t','t','c','f');
      end;

    { was #define dname def_expr }
    function TTAG_TYP1 : longint; { return type might be wrong }
      begin
        TTAG_TYP1:=FT_MAKE_TAG('T','Y','P','1');
      end;

    { was #define dname def_expr }
    function TTAG_typ1 : longint; { return type might be wrong }
      begin
        TTAG_typ1:=FT_MAKE_TAG('t','y','p','1');
      end;

    { was #define dname def_expr }
    function TTAG_VDMX : longint; { return type might be wrong }
      begin
        TTAG_VDMX:=FT_MAKE_TAG('V','D','M','X');
      end;

    { was #define dname def_expr }
    function TTAG_vhea : longint; { return type might be wrong }
      begin
        TTAG_vhea:=FT_MAKE_TAG('v','h','e','a');
      end;

    { was #define dname def_expr }
    function TTAG_vmtx : longint; { return type might be wrong }
      begin
        TTAG_vmtx:=FT_MAKE_TAG('v','m','t','x');
      end;

    { was #define dname def_expr }
    function TTAG_VVAR : longint; { return type might be wrong }
      begin
        TTAG_VVAR:=FT_MAKE_TAG('V','V','A','R');
      end;

    { was #define dname def_expr }
    function TTAG_wOFF : longint; { return type might be wrong }
      begin
        TTAG_wOFF:=FT_MAKE_TAG('w','O','F','F');
      end;

    { was #define dname def_expr }
    function TTAG_wOF2 : longint; { return type might be wrong }
      begin
        TTAG_wOF2:=FT_MAKE_TAG('w','O','F','2');
      end;

    { was #define dname def_expr }
    function TTAG_0xA5kbd : longint; { return type might be wrong }
      begin
        TTAG_0xA5kbd:=FT_MAKE_TAG($A5,'k','b','d');
      end;

    { was #define dname def_expr }
    function TTAG_0xA5lst : longint; { return type might be wrong }
      begin
        TTAG_0xA5lst:=FT_MAKE_TAG($A5,'l','s','t');
      end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_MAKE_TAG(_x1,_x2,_x3,_x4 : longint) : longint;
    begin
      FT_MAKE_TAG:=((((FT_STATIC_BYTE_CAST(FT_Tag,_x1)) shl 24) or ((FT_STATIC_BYTE_CAST(FT_Tag,_x2)) shl 16)) or ((FT_STATIC_BYTE_CAST(FT_Tag,_x3)) shl 8)) or (FT_STATIC_BYTE_CAST(FT_Tag,_x4));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_EMPTY(list : longint) : longint;
    begin
      FT_IS_EMPTY:=(list.head)=0;
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_BOOL(x : longint) : longint;
    begin
      FT_BOOL:=FT_STATIC_CAST(FT_Bool,x<>0);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_ERR_CAT(x,y : longint) : longint;
    begin
      FT_ERR_CAT:=FT_ERR_XCAT(x,y);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_ERR(e : longint) : longint;
    begin
      FT_ERR:=FT_ERR_CAT(FT_ERR_PREFIX,e);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    function FT_ERROR_BASE(x : longint) : Tx;
    begin
      FT_ERROR_BASE:=Tx(@($FF));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    function FT_ERROR_MODULE(x : longint) : Tx;
    begin
      FT_ERROR_MODULE:=Tx(@($FF00));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_ERR_EQ(x,e : longint) : longint;
    begin
      FT_ERR_EQ:=(FT_ERROR_BASE(x))=(FT_ERROR_BASE(FT_ERR(e)));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_ERR_NEQ(x,e : longint) : longint;
    begin
      FT_ERR_NEQ:=(FT_ERROR_BASE(x))<>(FT_ERROR_BASE(FT_ERR(e)));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_CURVE_TAG(flag : longint) : longint;
    begin
      FT_CURVE_TAG:=flag and $03;
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_HORIZONTAL(face : longint) : longint;
    begin
      FT_HAS_HORIZONTAL:= not ( not ((face^.face_flags) and FT_FACE_FLAG_HORIZONTAL));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_VERTICAL(face : longint) : longint;
    begin
      FT_HAS_VERTICAL:= not ( not ((face^.face_flags) and FT_FACE_FLAG_VERTICAL));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_KERNING(face : longint) : longint;
    begin
      FT_HAS_KERNING:= not ( not ((face^.face_flags) and FT_FACE_FLAG_KERNING));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_SCALABLE(face : longint) : longint;
    begin
      FT_IS_SCALABLE:= not ( not ((face^.face_flags) and FT_FACE_FLAG_SCALABLE));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_SFNT(face : longint) : longint;
    begin
      FT_IS_SFNT:= not ( not ((face^.face_flags) and FT_FACE_FLAG_SFNT));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_FIXED_WIDTH(face : longint) : longint;
    begin
      FT_IS_FIXED_WIDTH:= not ( not ((face^.face_flags) and FT_FACE_FLAG_FIXED_WIDTH));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_FIXED_SIZES(face : longint) : longint;
    begin
      FT_HAS_FIXED_SIZES:= not ( not ((face^.face_flags) and FT_FACE_FLAG_FIXED_SIZES));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_FAST_GLYPHS(face : longint) : longint;
    begin
      FT_HAS_FAST_GLYPHS:=0;
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_GLYPH_NAMES(face : longint) : longint;
    begin
      FT_HAS_GLYPH_NAMES:= not ( not ((face^.face_flags) and FT_FACE_FLAG_GLYPH_NAMES));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_MULTIPLE_MASTERS(face : longint) : longint;
    begin
      FT_HAS_MULTIPLE_MASTERS:= not ( not ((face^.face_flags) and FT_FACE_FLAG_MULTIPLE_MASTERS));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_NAMED_INSTANCE(face : longint) : longint;
    begin
      FT_IS_NAMED_INSTANCE:= not ( not ((face^.face_index) and $7FFF0000));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_VARIATION(face : longint) : longint;
    begin
      FT_IS_VARIATION:= not ( not ((face^.face_flags) and FT_FACE_FLAG_VARIATION));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_CID_KEYED(face : longint) : longint;
    begin
      FT_IS_CID_KEYED:= not ( not ((face^.face_flags) and FT_FACE_FLAG_CID_KEYED));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_IS_TRICKY(face : longint) : longint;
    begin
      FT_IS_TRICKY:= not ( not ((face^.face_flags) and FT_FACE_FLAG_TRICKY));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_COLOR(face : longint) : longint;
    begin
      FT_HAS_COLOR:= not ( not ((face^.face_flags) and FT_FACE_FLAG_COLOR));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_SVG(face : longint) : longint;
    begin
      FT_HAS_SVG:= not ( not ((face^.face_flags) and FT_FACE_FLAG_SVG));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_SBIX(face : longint) : longint;
    begin
      FT_HAS_SBIX:= not ( not ((face^.face_flags) and FT_FACE_FLAG_SBIX));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_HAS_SBIX_OVERLAY(face : longint) : longint;
    begin
      FT_HAS_SBIX_OVERLAY:= not ( not ((face^.face_flags) and FT_FACE_FLAG_SBIX_OVERLAY));
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_LOAD_TARGET_(x : longint) : longint;
    begin
      FT_LOAD_TARGET_:=(FT_STATIC_CAST(FT_Int32,Tx(@(15)))) shl 16;
    end;

    { was #define dname def_expr }
    function FT_LOAD_TARGET_NORMAL : longint; { return type might be wrong }
      begin
        FT_LOAD_TARGET_NORMAL:=FT_LOAD_TARGET_(FT_RENDER_MODE_NORMAL);
      end;

    { was #define dname def_expr }
    function FT_LOAD_TARGET_LIGHT : longint; { return type might be wrong }
      begin
        FT_LOAD_TARGET_LIGHT:=FT_LOAD_TARGET_(FT_RENDER_MODE_LIGHT);
      end;

    { was #define dname def_expr }
    function FT_LOAD_TARGET_MONO : longint; { return type might be wrong }
      begin
        FT_LOAD_TARGET_MONO:=FT_LOAD_TARGET_(FT_RENDER_MODE_MONO);
      end;

    { was #define dname def_expr }
    function FT_LOAD_TARGET_LCD : longint; { return type might be wrong }
      begin
        FT_LOAD_TARGET_LCD:=FT_LOAD_TARGET_(FT_RENDER_MODE_LCD);
      end;

    { was #define dname def_expr }
    function FT_LOAD_TARGET_LCD_V : longint; { return type might be wrong }
      begin
        FT_LOAD_TARGET_LCD_V:=FT_LOAD_TARGET_(FT_RENDER_MODE_LCD_V);
      end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_LOAD_TARGET_MODE(x : longint) : longint;
    begin
      FT_LOAD_TARGET_MODE:=FT_STATIC_CAST(FT_Render_Mode,(x shr 16) and 15);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_ERRORDEF_(e,v,s : longint) : longint;
    begin
      FT_ERRORDEF_:=FT_ERRORDEF(FT_ERR_CAT(FT_ERR_PREFIX,e),v+FT_ERR_BASE,s);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_NOERRORDEF_(e,v,s : longint) : longint;
    begin
      FT_NOERRORDEF_:=FT_ERRORDEF(FT_ERR_CAT(FT_ERR_PREFIX,e),v,s);
    end;

    { was #define dname def_expr }
    function FT_PUBLIC_FUNCTION_ATTRIBUTE : longint; { return type might be wrong }
      begin
        FT_PUBLIC_FUNCTION_ATTRIBUTE:=__declspec(dllexport);
      end;

    { was #define dname def_expr }
    function FT_PUBLIC_FUNCTION_ATTRIBUTE : longint; { return type might be wrong }
      begin
        FT_PUBLIC_FUNCTION_ATTRIBUTE:=__declspec(dllimport);
      end;

    { was #define dname def_expr }
    function FT_PUBLIC_FUNCTION_ATTRIBUTE : longint; { return type might be wrong }
      begin
        FT_PUBLIC_FUNCTION_ATTRIBUTE:=__attribute__(visibility('default'));
      end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    { return type might be wrong }   
    function FT_UNUSED(arg : longint) : longint;
    begin
      FT_UNUSED:=arg:=arg;
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    function FT_STATIC_CAST(_type,var : longint) : Ttype;
    begin
      FT_STATIC_CAST:=Ttype(var);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    function FT_REINTERPRET_CAST(_type,var : longint) : Ttype;
    begin
      FT_REINTERPRET_CAST:=Ttype(var);
    end;

    { was #define dname(params) para_def_expr }
    { argument types are unknown }
    function FT_STATIC_BYTE_CAST(_type,var : longint) : Ttype;
    begin
      FT_STATIC_BYTE_CAST:=Ttype(byte(var));
    end;

